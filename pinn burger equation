using NeuralPDE, ModelingToolkit, Lux, Plots, OptimizationOptimJL, Optimization, Optim, OptimizationOptimisers, MAT

@parameters t , x
@variables u(..)
Dxx = Differential(x)^2
Dx = Differential(x)
Dt = Differential(t)

equation = Dt(u(t,x)) + u(t,x) * Dx(u(t,x)) - (0.01/pi) * Dxx(u(t,x)) ~ 0
bcs = [u(0,x) ~ -sin(pi*x) , u(t,-1) ~ 0.f0, u(t,1) ~ 0.f0]
domains = [t ∈ IntervalDomain(0.0,1.0), x ∈ IntervalDomain(-1.0,1.0)]
@named pde_system = PDESystem(equation, bcs, domains, [t,x], [u(t,x)])

dim = 2
chain = Lux.Chain(Lux.Dense(dim,16,tanh), Lux.Dense(16,16,tanh), Lux.Dense(16,1))
dx = 0.05
discretization = PhysicsInformedNN(chain,NeuralPDE.GridTraining(dx))
prob = discretize(pde_system,discretization)
phi = discretization.phi


opt = Optim.BFGS()
res = Optimization.solve(prob, opt, maxiters=1000)

ts,xs = [infimum(d.domain):dx:supremum(d.domain) for d in domains]
u_predict_contourf = reshape([first(phi([t,x],res.minimizer)) for t in ts for x in xs] ,length(xs),length(ts))
p = plot(ts, xs, u_predict_contourf, linetype=:contourf,title = "Predict U, using PINNs")

u_predict = [[first(phi([t,x],res.minimizer)) for x in xs] for t in ts ]
p1= plot(xs, u_predict[3],title = "t = 0.1");
p2= plot(xs, u_predict[11],title = "t = 0.5");
p3= plot(xs, u_predict[end],title = "t = 1");
plot(p1,p2,p3)

data = matread("e:Burgers.mat")
x_data = vec(data["x"])
t_data = vec(data["t"])
u_data = data["usol"]
plot_u_data = contourf(t_data, x_data, u_data, title="Exact result", xlabel="Time", ylabel="Position")

p4= plot(x_data, u_data[:,10],title = "t = 0.1s")
p5= plot(x_data, u_data[:,50],title = "t = 0.5s")
p6= plot(x_data, u_data[:,100],title = "t = 1.0s")
plot(p4,p5,p6)
